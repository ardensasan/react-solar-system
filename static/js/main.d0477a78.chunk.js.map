{"version":3,"sources":["SolarSystem/components/Planet/index.tsx","common/planets.ts","assets/maps/map/mercury.jpg","assets/maps/map/venus.jpg","assets/maps/map/earth.jpg","assets/maps/map/mars.jpg","assets/maps/map/jupiter.jpg","assets/maps/map/saturn.jpg","assets/maps/map/uranus.jpg","assets/maps/map/neptune.jpg","common/sun.ts","assets/maps/map/sun.jpg","SolarSystem/components/Sun/index.tsx","SolarSystem/index.tsx","assets/loading_icon.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Planet","radius","distanceFromSun","map","revolution","rotation","meshRef","useRef","mapTexture","useTexture","angle","increase","useFrame","current","mesh","position","z","Math","cos","x","sin","rotateY","ref","args","planetList","name","SunProps","Sun","CanvasConfig","useThree","state","gl","scene","background","Color","setSize","window","innerWidth","innerHeight","SolarSystem","camera","OrbitControls","intensity","planet","index","properties","App","className","fallback","src","loading_icon","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0477a78.chunk.js","sourcesContent":["import { useTexture } from \"@react-three/drei\";\r\nimport { useFrame } from \"@react-three/fiber\";\r\nimport { useRef } from \"react\";\r\nimport { FC } from \"react\";\r\nimport { Mesh } from \"three\";\r\nimport { Props } from \"./types\";\r\nconst Planet: FC<Props> = ({\r\n  radius,\r\n  distanceFromSun,\r\n  map,\r\n  revolution,\r\n  rotation,\r\n}) => {\r\n  const meshRef = useRef<Mesh>(null);\r\n  const mapTexture = useTexture(map);\r\n  let angle = 0; //angle in radians\r\n  const increase = 6.28319 / revolution;\r\n  useFrame(() => {\r\n    angle += increase / 1000;\r\n    if (angle >= 6.28319) angle = 0;\r\n    if (meshRef.current) {\r\n      const { current: mesh } = meshRef;\r\n      mesh.position.z = Math.cos(angle) * distanceFromSun;\r\n      mesh.position.x = Math.sin(angle) * distanceFromSun;\r\n      mesh.rotateY(6.28319 / rotation / 1000);\r\n    }\r\n  });\r\n\r\n  return (\r\n    <mesh position={[0, 0, distanceFromSun]} ref={meshRef}>\r\n      <sphereGeometry args={[radius]} />\r\n      <meshStandardMaterial map={mapTexture} />\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Planet;\r\n","import mercuryMap from \"../assets/maps/map/mercury.jpg\";\r\nimport venusMap from \"../assets/maps/map/venus.jpg\";\r\nimport earthMap from \"../assets/maps/map/earth.jpg\";\r\nimport marsMap from \"../assets/maps/map/mars.jpg\";\r\nimport jupiterMap from \"../assets/maps/map/jupiter.jpg\";\r\nimport saturnMap from \"../assets/maps/map/saturn.jpg\";\r\nimport uranusMap from \"../assets/maps/map/uranus.jpg\";\r\nimport neptuneMap from \"../assets/maps/map/neptune.jpg\";\r\nimport { PlanetProperties } from \"./types\";\r\n\r\n//revolution and rotation data from https://www.exploratorium.edu/ronh/age/\r\n//planet sizes based on https://solarsystem.nasa.gov/resources/686/solar-system-sizes/\r\nexport const planetList: Array<PlanetProperties> = [\r\n  {\r\n    name: \"Mercury\",\r\n    radius: 0.00244,\r\n    distanceFromSun: 1.11,\r\n    revolution: 47.9,\r\n    rotation: 58.6,\r\n    map: mercuryMap,\r\n  },\r\n  {\r\n    name: \"Venus\",\r\n    radius: 0.006052,\r\n    distanceFromSun: 1.22,\r\n    revolution: 224.7,\r\n    rotation: 243,\r\n    map: venusMap,\r\n  },\r\n  {\r\n    name: \"Earth\",\r\n    radius: 0.06371,\r\n    distanceFromSun: 1.39,\r\n    revolution: 365.26,\r\n    rotation: 1,\r\n    map: earthMap,\r\n  },\r\n  {\r\n    name: \"Mars\",\r\n    radius: 0.0393,\r\n    distanceFromSun: 1.53,\r\n    revolution: 1.88,\r\n    rotation: 1.03,\r\n    map: marsMap,\r\n  },\r\n  {\r\n    name: \"Jupiter\",\r\n    radius: 0.36911,\r\n    distanceFromSun: 2.02,\r\n    revolution: 11.86,\r\n    rotation: 0.41,\r\n    map: jupiterMap,\r\n  },\r\n  {\r\n    name: \"Saturn\",\r\n    radius: 0.24232,\r\n    distanceFromSun: 2.70,\r\n    revolution: 0.45,\r\n    rotation: 29.46,\r\n    map: saturnMap,\r\n  },\r\n  {\r\n    name: \"Uranus\",\r\n    radius: 0.15362,\r\n    distanceFromSun: 3.17,\r\n    revolution: 0.72,\r\n    rotation: 84.01,\r\n    map: uranusMap,\r\n  },\r\n  {\r\n    name: \"Neptune\",\r\n    radius: 0.14622,\r\n    distanceFromSun: 3.54,\r\n    revolution: 0.67,\r\n    rotation: 164.79,\r\n    map: neptuneMap,\r\n  },\r\n];\r\n","export default __webpack_public_path__ + \"static/media/mercury.8f80953b.jpg\";","export default __webpack_public_path__ + \"static/media/venus.4b03f2d6.jpg\";","export default __webpack_public_path__ + \"static/media/earth.981cc3e3.jpg\";","export default __webpack_public_path__ + \"static/media/mars.33960f5a.jpg\";","export default __webpack_public_path__ + \"static/media/jupiter.3e84533e.jpg\";","export default __webpack_public_path__ + \"static/media/saturn.3b074d8e.jpg\";","export default __webpack_public_path__ + \"static/media/uranus.428ad3f9.jpg\";","export default __webpack_public_path__ + \"static/media/neptune.6dd11266.jpg\";","import sunMap from '../assets/maps/map/sun.jpg'\r\n\r\nexport const SunProps = {\r\n    name: \"Sun\",\r\n    radius: 1,\r\n    map:sunMap,\r\n}\r\n","export default __webpack_public_path__ + \"static/media/sun.4b569137.jpg\";","import { useTexture } from \"@react-three/drei\";\r\nimport { FC } from \"react\";\r\nimport { SunProps } from \"../../../common/sun\";\r\nconst Sun: FC<{}> = () => {\r\n  const { radius, map } = SunProps;\r\n  const mapTexture = useTexture(map);\r\n  return (\r\n    <mesh>\r\n      <sphereGeometry args={[radius, radius * 50, radius * 50]} />\r\n      <meshBasicMaterial map={mapTexture}/>\r\n    </mesh>\r\n  );\r\n};\r\n\r\nexport default Sun;\r\n","import { Canvas, useThree } from \"@react-three/fiber\";\r\nimport { OrbitControls } from \"@react-three/drei\";\r\nimport Planet from \"./components/Planet\";\r\nimport Orbit from \"./components/Orbit\";\r\nimport { planetList } from \"../common/planets\";\r\nimport { Color } from \"three\";\r\nimport { Fragment } from \"react\";\r\nimport { PlanetProperties } from \"./types\";\r\nimport Sun from \"./components/Sun\";\r\nconst CanvasConfig = () => {\r\n  const { gl, scene } = useThree((state) => state);\r\n  scene.background = new Color(\"black\");\r\n  gl.setSize(window.innerWidth, window.innerHeight);\r\n  return null;\r\n};\r\n\r\nconst SolarSystem = () => {\r\n  return (\r\n    <Canvas camera={{ position: [5, 5, 0] }}>\r\n      <CanvasConfig />\r\n      <OrbitControls />\r\n      <pointLight intensity={10}/>\r\n      <Sun />\r\n      {planetList.map((planet: PlanetProperties, index: number) => {\r\n        const { ...properties } = planet;\r\n        return (\r\n          <Fragment key={index}>\r\n            <Planet {...properties} />\r\n            {/* <Orbit radius={properties.distanceFromSun} /> */}\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </Canvas>\r\n  );\r\n};\r\n\r\nexport default SolarSystem;","export default __webpack_public_path__ + \"static/media/loading_icon.011aaec0.jpg\";","import { Suspense } from \"react\";\r\nimport SolarSystem from \"./SolarSystem\";\r\nimport loading_icon from \"./assets/loading_icon.jpg\";\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<img src={loading_icon} alt=\"loading\" />}>\r\n        <SolarSystem />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}